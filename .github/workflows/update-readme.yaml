# .github/workflows/update-readme.yml
name: Update README with Table of Contents

on:
  push:
    branches: [ main, master ]
    paths:
      - '*/README.md'
      - '**/*.ps1'
      - '**/*.md'  # Alle Markdown-Dateien
      - '**/REDME.md'  # Falls wieder Tippfehler auftreten
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Manueller Trigger

permissions:
  contents: write  # Berechtigung zum Schreiben von Inhalten
  pull-requests: write  # Berechtigung für Pull Requests

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Generate README Content
      run: |
        cat > generate_readme.py << 'EOF'
        import os
        import re
        from datetime import datetime

        def count_ps1_files(directory):
            """Zählt PowerShell-Dateien in einem Verzeichnis"""
            count = 0
            if os.path.exists(directory):
                for file in os.listdir(directory):
                    if file.endswith('.ps1'):
                        count += 1
            return count

        def extract_description_from_readme(readme_path):
            """Extrahiert die erste Beschreibung aus einer README"""
            if not os.path.exists(readme_path):
                return ""
            
            try:
                with open(readme_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Suche nach der ersten Beschreibung nach dem Titel
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.strip() and not line.startswith('#') and not line.startswith('>'): 
                        if len(line.strip()) > 20:  # Mindestlänge für Beschreibung
                            return line.strip()
                
                return ""
            except Exception as e:
                print(f"Fehler beim Lesen von {readme_path}: {e}")
                return ""

        def find_readme_file(directory):
            """Findet README-Datei auch bei Tippfehlern"""
            possible_names = ['README.md', 'readme.md', 'REDME.md', 'Readme.md']
            for name in possible_names:
                path = os.path.join(directory, name)
                if os.path.exists(path):
                    return path
            return None

        # Repository-Struktur scannen
        categories = []
        base_dirs = [d for d in os.listdir('.') if os.path.isdir(d) and not d.startswith('.') 
                     and d not in ['node_modules', '.git', '.github']]
        
        print(f"Gefundene Verzeichnisse: {base_dirs}")
        
        for directory in sorted(base_dirs):
            readme_path = find_readme_file(directory)
            script_count = count_ps1_files(directory)
            
            print(f"Verzeichnis: {directory}")
            print(f"  - README gefunden: {readme_path}")
            print(f"  - Script-Anzahl: {script_count}")
            
            if script_count > 0 or readme_path:
                description = extract_description_from_readme(readme_path) if readme_path else ""
                categories.append({
                    'name': directory,
                    'description': description,
                    'script_count': script_count,
                    'has_readme': readme_path is not None,
                    'readme_path': readme_path
                })

        # README-Inhalt generieren
        total_scripts = sum(cat['script_count'] for cat in categories)
        update_time = datetime.now().strftime('%d.%m.%Y')
        update_timestamp = datetime.now().strftime('%d.%m.%Y um %H:%M:%S')
        
        readme_lines = [
            "# DSE Scriptvault",
            "",
            "> [!IMPORTANT]",
            f"> _Letztes Update: {update_time}_\\",
            f"> _Gesamtanzahl Scripts: {total_scripts}_ \\",
            f"> _Kategorien: {len(categories)}_",
            ""
        ]

        for category in categories:
            readme_lines.append(f"### [{category['name']}]({category['name']}/)")
            readme_lines.append("")
            
            if category['description']:
                readme_lines.append(f"{category['description']}")
                readme_lines.append("")
            
            readme_lines.append(f"- **Anzahl Scripts:** {category['script_count']}")
            
            # Liste der Scripts hinzufügen
            script_files = []
            if os.path.exists(category['name']):
                for file in sorted(os.listdir(category['name'])):
                    if file.endswith('.ps1'):
                        script_files.append(file)
            
            if script_files:
                readme_lines.append("- **Verfügbare Scripts:**")
                for script in script_files:
                    readme_lines.append(f"  - `{script}`")
            
            readme_lines.append("")

        readme_lines.append(f"> _README.md Automatisch generiert am {update_timestamp} UTC_")

        # README-Datei schreiben
        with open('README.md', 'w', encoding='utf-8') as f:
            f.write('\n'.join(readme_lines))

        print("README.md wurde erfolgreich generiert!")
        print(f"Gefundene Kategorien: {len(categories)}")
        print(f"Gesamtanzahl Scripts: {total_scripts}")
        for cat in categories:
            print(f"  - {cat['name']}: {cat['script_count']} Scripts (README: {cat['readme_path']})")
        EOF
        
        python generate_readme.py

    - name: Auto-commit README changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'Auto-update README.md mit aktuellem Inhaltsverzeichnis'
        file_pattern: 'README.md'
        commit_user_name: 'github-actions[bot]'
        commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'
        commit_author: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
        skip_dirty_check: false
        skip_fetch: false
        skip_checkout: false